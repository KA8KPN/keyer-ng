Okay, I'm going to do a keyer from scratch.  The first thing to do is to
take a contact closure and beep a speaker with it.  Then, I can implement
iambic at a fixed speed.  Then, make improvements.

Since measuring milliseconds is easy, I'll use a twitch (see the keyer notes)
of 1 millisecond.  This corresponds to a standard word of "CODEX".  Anyway,
at the beginning, I will do a contact closure.  The left leg connects to pin
D5, the right leg connects to pin D2.  The speaker is connected to pin D4.

=======================================================================

Progress, I can do an iambic-A keyer, and it sounds the sidetone.  It also
should key the desired line (although I haven't tested that) and it reads a
potentiometer for a speed control and displays that speed control on the LCD.

Next, I need to do three things, in no particular order.  I need to design
the display interface.  I need to split the paddle handling logic out of the
main loop and into a set of classes (one per keying type, straight, bug,
iambic-a, iambic-b, ultimatic, etc) and I need to add commands that I can use
to alter the configuration of the keyer.

To add commands, I need some way of entering commands, so I either need a
serial port, a PS/2 keyboard, or the ability to interpret morse code as sent
by the operator.  I also need to design the commands, so I'll put that off.

Next, I think I want to design the display interface.  Most guys are using
2-line display, each of 16 characters.  I'm using 4-lines, each of 20
characters because I like lots of screen real-estate.  The problem is, I don't
(yet-at any rate) know how to define an interface that works in both cases.

I DO know that I don't want to just display the sent CW.  That's just about
the most useless thing the K3NG software does.

What information do I want to display?  Well, start with the speed.  Also,
which TX is enabled, and whether or not the side tone is on.  How about
whether or not the paddles are reversed.  Also, the mode the keyer is in,
and maybe which memory is transmitting if a memory is transmitting.

I don't think I want to know if the CW is being entered from the paddles, the
keyboard, or a serial port, but I might add that if I don't choose something
else.

Okay, here's my display:
           1         2
  12345678901234567890
 1IamB 25 Tx1S Nor Pad
 2
 3
 4

The other three lines could be like it works now.  The first field is "IamB"
which means "Iambic-B".  The other values would be "IamA" (Iambic-A) " Bug"
(semiautomatic), "Ulti" (Ultimatic) or "Strt" (Straight or "Cootie" Key).

"25" would be the speed in WPM, and could take up to three digits.  "Tx1"
would be which transmitter would be transmitting, which might be "Tx1",
"Tx2",through however many or "CPO" for transmitter off.  The "S" would mean
the sidetone is on.

"Nor" would be normal paddle orientation, and "Rev" would be reverse.

"Pad" would be currently transmitting from the paddles.  Other possible values
would be "KBD" for keyboard, "Ser" for serial port, "Mnn" for memory number nn
or "Rnn" for repeating memory number nn.

Other values I might like to should would be the current serial number,  That
might go on the second row.  Like I said, nothing is more useless than what's
been transmitted.

For a 2x16 display, notice I cunningly made the first four items 16 characters
long, and I can envision scrolling the sent text along the bottom line.  I
might just put text only on the bottom line in any case, figuring that I'll
know what to do with the rest of the lines at some point.

I think that having three scrolling lines is kind of excessive.  I mean, I can
see having scrolling text so that the user can see what's going on, but I
can't see having more than one line scroll.  So, I'm going to make the fields
bigger.

           1         2
  12345678901234567890
 1Iambic Mode A  25wpm
 2Xmitter 1  Tone  800
 3Paddles Reverse
 4

I thought about it, and I think I want to visually display whether or not the
system is in "program" mode.  So, how about this:

           1         2
  12345678901234567890
 1Iambic-A Prog  25wpm
 2Xmitter 1  Tone  800
 3Paddles Reverse
 4

in program mode and

           1         2
  12345678901234567890
 1Iambic-A       25wpm
 2Xmitter 1  Tone  800
 3Paddles Reverse
 4

pWhen not in program mode.

I also want to show the serial number, when that feature is included.  I think
I can put that on the 3rd row.  So, how about this?

           1         2
  12345678901234567890
 1Iambic-A       25wpm
 2Xmitter 1  Tone  800
 3Norm Paddle    #####
 4

--------------------------------------------------

Configuration changes through the keyboard

Ctrl-O toggles the sidetone on and off.  The K3NG software also does \o and CommandMode-o (through paddles)
Ctrl-N toggles the paddle reverse.  The K3NG software also does \n and CommandMode-n (through paddles)


--------------------------------------------------
TODO:
DONE)  Split the paddle logic out of the main function.

DONE)  Split the serial port handling out of the main function.

DONE) Split the text to morse functionality out of the serial port handling.

DONE) add PS/2 Morse keyboard

DONE)  Configuration changes through serial and keyboard.  The first change will be reverse paddles and sidetone toggle

Figure out how to do the display strings better.  Maybe with defined constants that only the display class knows how to interpret.  I can't tell the difference between serial port input and keyboard input, so take that into account

Set up a mechanism for including or eliminating specified features and options similar to the way K3NG's firmware set does.  This is a big invasive change, so I want to do this soon before things get too far advanced.

Read the buttons

Configuration changes through the paddles with a command button.  The first change will be reverse and sidetone toggle

If I don't send anything for a while, and the last character is not a space,
then the last character on the scrolling display should be a space.

Pass the display manager to the keying constructor (along with the
"transmitter number") so it can update the display when the transmit mode
changes.

PTT Logic, including keyer start delay after PTT asserted.

DONE) Scrolling text as it is sent (although it could use some enhancement)

DONE) Morse through the serial port (although it could use some enhancement)

DONE) I'm having trouble sending KN, figure out why and fix it.  (I modified the paddle scan timing.)

Allow for the programming and playing back of memories.
