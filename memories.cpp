#include "options.h"

#ifdef FEATURE_MEMORIES

#include "Arduino.h"

#include "memories.h"
#include "wpm.h"
#include "display.h"
#include "morse_to_text.h"

memories *system_memories = NULL;

static uint8_t s_memories[MEMORY_SIZE];
static uint8_t initialization[MEMORY_SIZE] = {
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "1"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "2"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "3"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xca, 0x8a, 0xca, 0x8a, 0xca, 0x8a, 0xde, 0x9e, // "4"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xca, 0x8a, 0xca, 0x8a, 0xca, 0x8a, 0xca, 0x9e, // "5"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xde, 0x8a, 0xca, 0x8a, 0xca, 0x8a, 0xca, 0x8a, 0xca, 0x9e, // "6"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xde, 0x8a, 0xde, 0x8a, 0xca, 0x8a, 0xca, 0x8a, 0xca, 0x9e, // "7"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xca, 0x8a, 0xca, 0x9e, // "8"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xca, 0x9e, // "9"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "1"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "0"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "1"
    0xca, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "1"
    0x00,
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xca, 0x9e,                                                 // "E"
    0xde, 0x8a, 0xde, 0x9e,                                     // "M"
    0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e,                         // "O"
    0xca, 0x8a, 0xde, 0x8a, 0xca, 0x9e,                         // "R"
    0xde, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x9e,             // "Y"
    0xa8,
    0xca, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "1"
    0xca, 0x8a, 0xca, 0x8a, 0xde, 0x8a, 0xde, 0x8a, 0xde, 0x9e, // "2"
    0x00
};

void memories_initialize(void) {
    system_memories = new memories(12);
}

memories::memories(int n) {
    int i;
    // Okay, to begin with, I'm going to program each memory with "memory <X>" where <X> will be the memory
    // number from 1 12
    // So, the values in each memory will begin with
    // 0xde 0x8a 0xde 0x9e                     "M"
    // 0xca 0x9e                               "E"
    // 0xde 0x8a 0xde 0x9e                     "M"
    // 0xde 0x8a 0xde 0x8a 0xde 0x9e           "O"
    // 0xca 0x8a 0xde 0x8a 0xca 0x9e           "R"
    // 0xde 0x8a 0xca 0x8a 0xde 0x8a 0xde 0x9e "Y"

    // And the digits
    // 0xde 0x8a 0xde 0x8a 0xde 0x8a 0xde 0x8a 0xde 0x9e "0"
    // 0xca 0x8a 0xde 0x8a 0xde 0x8a 0xde 0x8a 0xde 0x9e "1"
    // 0xca 0x8a 0xca 0x8a 0xde 0x8a 0xde 0x8a 0xde 0x9e "2"
    // 0xca 0x8a 0xde 0x8a 0xca 0x8a 0xde 0x8a 0xde 0x9e "3"
    // 0xca 0x8a 0xca 0x8a 0xca 0x8a 0xca 0x8a 0xde 0x9e "4"
    // 0xca 0x8a 0xca 0x8a 0xca 0x8a 0xca 0x8a 0xca 0x9e "5"
    // 0xde 0x8a 0xca 0x8a 0xca 0x8a 0xca 0x8a 0xca 0x9e "6"
    // 0xde 0x8a 0xde 0x8a 0xca 0x8a 0xca 0x8a 0xca 0x9e "7"
    // 0xde 0x8a 0xde 0x8a 0xde 0x8a 0xca 0x8a 0xca 0x9e "8"
    // 0xde 0x8a 0xde 0x8a 0xde 0x8a 0xde 0x8a 0xca 0x9e "9"

    // And they all end with 0x00.  In addition there will be an additional 40 twitch times between
    // the Y and the digit, which will be encoded with 0xa8
    // 10011110
    // 00001010
    // 10101000

    // So, the first 9 memories are all going to be 42 bytes long and the last three will all be 52 bytes long
    m_index[0] = 0;
    m_index[1] = 42;
    m_index[2] = 84;
    m_index[3] = 126;
    m_index[4] = 168;
    m_index[5] = 210;
    m_index[6] = 252;
    m_index[7] = 294;
    m_index[8] = 336;
    m_index[9] = 378;
    m_index[10] = 430;
    m_index[11] = 482;

    for (i=0; i<MEMORY_SIZE; ++i) {
	s_memories[i] = initialization[i];
	// s_memories[i] = 0;
    }

    m_mptr = -1;
}


void memories::play_memory(uint8_t m) {
    if ((0 < m) && (MAX_MEMORIES >= m)) {
	m_mptr = m_index[m-1];
    }
}


input_mode_t memories::update(unsigned long now, input_mode_t mode) {
    if ((MODE_MEMORY != mode) && (-1 < m_mptr)) {
	mode = MODE_MEMORY;
	DISPLAY_MANAGER_INPUT_SOURCE(mode);
	m_nextByteTime = now-1;
    }
    if ((MODE_MEMORY == mode) && (m_nextByteTime < now)) {
	switch (s_memories[m_mptr] >> 6) {
	case 2:
	    m_nextByteTime = now + WPM_TWITCHES() * (0x3f & s_memories[m_mptr]);
	    TRANSMITTER_KEY_UP();
	    if (15 < (0x3f & s_memories[m_mptr])) {
		if (35 < (0x3f & s_memories[m_mptr])) {
		    MORSE_TO_TEXT_UPDATE(WordSpace);
		}
		else {
		    MORSE_TO_TEXT_UPDATE(CharSpace);
		}
	    }
	    m_mptr++;
	    break;

	case 3:
	    m_nextByteTime = now + WPM_TWITCHES() * (0x3f & s_memories[m_mptr]);
	    TRANSMITTER_KEY_DOWN();
	    if (15 < (0x3f & s_memories[m_mptr])) {
		MORSE_TO_TEXT_UPDATE(Dah);
	    }
	    else {
		MORSE_TO_TEXT_UPDATE(Dit);
	    }
	    m_mptr++;
	    break;

	default:
	    mode = CONFIG_MANAGER_PADDLES_MODE();
	    DISPLAY_MANAGER_INPUT_SOURCE(mode);
	    m_mptr = -1;
	    MORSE_TO_TEXT_UPDATE(WordSpace);
	    break;
	}
    }

    return mode;
}

#endif // FEATURE_MEMORIES
